{"version":3,"sources":["App.js","action.js","Redcer.js","Loggedredcer.js","Basic.js","BasicTable.js","Combinered.js","Video.js","serviceWorker.js","index.js"],"names":["App","dispatch","useDispatch","C","useSelector","state","Conter2","isLog2","isbasic","store","Basic1","isBasicTable","Bt","className","onClick","type","console","log","myredcer","action","myloggedredcer","Basic","initialValues","email","password","validate","values","errors","test","onSubmit","setSubmitting","setTimeout","alert","JSON","stringify","touched","handleChange","handleBlur","handleSubmit","isSubmitting","name","onChange","onBlur","value","disabled","createData","calories","fat","carbs","protein","rows","allRedcers","combineReducers","Redcer","Loggedredcer","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","key","scope","props","autoPlay","src","position","Boolean","window","location","hostname","match","Store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","Video","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8e3ee778.chunk.js","sourcesContent":["import React from 'react';\nimport { useDispatch,useSelector } from 'react-redux';\nimport {increment,logged } from './action';\n\nimport './App.css';\n\nconst App = () => \n \n{\n  const dispatch = useDispatch();\n  const C = useSelector(state => state.Conter2);\n  const isLog2= useSelector(state => state.isLog2);\n  const isbasic=useSelector(store => store.Basic1);\n  const isBasicTable=useSelector(store => store.Bt);\n  \n  \n  return (\n    <div className=\"App\">\n      <h1>Increment:{C}</h1>\n       <h2>Logged:{isLog2}</h2>\n     <h3>Basic{isbasic}</h3>\n  <h4>IsBasicTabel:{isBasicTable}</h4>\n      <button onClick={() => dispatch(increment(),console.log(\"Added increment vale\"))}> Add </button>\n      <button onClick={() => dispatch(logged(),console.log(\"Logged in\"))}> logg </button>\n \n   \n       {/* <button onClick={() => increment()}> + </button> */}\n  \n    </div>\n  );\n}\n\nexport default App;\n"," \r\n export const increment = () => \r\n {\r\n    return{\r\n        type:'increment'\r\n    }\r\n}\r\n\r\nexport const logged = () => \r\n{\r\n   return{\r\n       type:'logged'\r\n   }\r\n}\r\n\r\n\r\n// export default (increment,logged)\r\n","const myredcer = (state= 0,action) => {\r\n\r\n    switch(action.type){\r\n        case 'increment':\r\n        return state+1;\r\n\r\n       default :\r\n        return state;\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default myredcer;","const myloggedredcer = (state=false,action) => {\r\n\r\n    switch(action.type){\r\n        case 'logged':\r\n        return !state;\r\n        \r\n\r\n        default :\r\n        return state;\r\n     \r\n    }\r\n\r\n}\r\n\r\nexport default myloggedredcer;","import React from 'react';\r\n import { Formik } from 'formik';\r\n \r\n const Basic = () => (\r\n   <div>\r\n     <h1>Anywhere in your app!</h1>\r\n     <Formik\r\n       initialValues={{ email: '', password: '' }}\r\n       validate={values => {\r\n         const errors = {};\r\n         if (!values.email) {\r\n           errors.email = 'Required';\r\n         } else if (\r\n           !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i.test(values.email)\r\n         ) {\r\n           errors.email = 'Invalid email address';\r\n         }\r\n         return errors;\r\n       }}\r\n       onSubmit={(values, { setSubmitting }) => {\r\n         setTimeout(() => {\r\n           alert(JSON.stringify(values, null, 2));\r\n           setSubmitting(false);\r\n         }, 400);\r\n       }}\r\n     >\r\n       {({\r\n         values,\r\n         errors,\r\n         touched,\r\n         handleChange,\r\n         handleBlur,\r\n         handleSubmit,\r\n         isSubmitting,\r\n         /* and other goodies */\r\n       }) => (\r\n         <form onSubmit={handleSubmit}>\r\n           <input\r\n             type=\"email\"\r\n             name=\"email\"\r\n             onChange={handleChange}\r\n             onBlur={handleBlur}\r\n             value={values.email}\r\n           />\r\n           {errors.email && touched.email && errors.email}\r\n           <input\r\n             type=\"password\"\r\n             name=\"password\"\r\n             onChange={handleChange}\r\n             onBlur={handleBlur}\r\n             value={values.password}\r\n           />\r\n           {errors.password && touched.password && errors.password}\r\n           <button type=\"submit\" disabled={isSubmitting}>\r\n             Submit\r\n           </button>\r\n         </form>\r\n       )}\r\n     </Formik>\r\n   </div>\r\n );\r\n \r\n export default Basic;","import React from 'react';\r\n// import { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\n// const useStyles = makeStyles({\r\n//   table: {\r\n//     minWidth: 650,\r\n//   },\r\n// });\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData('Frozen yoghurt', 159, 6.0, 24, 4.0),\r\n  createData('Ice cream sandwich', 237, 9.0, 37, 4.3),\r\n  createData('Eclair', 262, 16.0, 24, 6.0),\r\n  createData('Cupcake', 305, 3.7, 67, 4.3),\r\n  createData('Gingerbread', 356, 16.0, 49, 3.9),\r\n];\r\n\r\nexport default function BasicTable() {\r\n//   const classes = useStyles();\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table  aria-label=\"simple table\">\r\n        <TableHead>\r\n          <TableRow>\r\n            <TableCell>Dessert (100g serving)</TableCell>\r\n            <TableCell align=\"right\">Calories</TableCell>\r\n            <TableCell align=\"right\">Fat&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Carbs&nbsp;(g)</TableCell>\r\n            <TableCell align=\"right\">Protein&nbsp;(g)</TableCell>\r\n          </TableRow>\r\n        </TableHead>\r\n        <TableBody>\r\n          {rows.map((row) => (\r\n            <TableRow key={row.name}>\r\n              <TableCell component=\"th\" scope=\"row\">\r\n                {row.name}\r\n              </TableCell>\r\n              <TableCell align=\"right\">{row.calories}</TableCell>\r\n              <TableCell align=\"right\">{row.fat}</TableCell>\r\n              <TableCell align=\"right\">{row.carbs}</TableCell>\r\n              <TableCell align=\"right\">{row.protein}</TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport Redcer from './Redcer';\r\nimport Loggedredcer from './Loggedredcer';\r\nimport Basic from './Basic';\r\nimport BasicTable from \"./BasicTable\";\r\n\r\nconst allRedcers= combineReducers({\r\n  Conter2:Redcer,\r\n  isLog2:Loggedredcer,\r\n  Basic1:Basic,\r\n  Bt:BasicTable\r\n});\r\n\r\n\r\nexport default allRedcers;","import React from 'react';\r\nimport { Player, BigPlayButton } from 'video-react';\r\n\r\nexport default props => {\r\n  return (\r\n    <Player autoPlay  src=\"https://media.w3.org/2010/05/sintel/trailer_hd.mp4\">\r\n      <BigPlayButton position=\"center\" />\r\n    </Player>\r\n  );\r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport allRedcers from \"./Combinered\";\nimport Video from './Video';\n// import BasicTable from \"./BasicTable\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst Store = createStore(\n  allRedcers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <Provider store={Store}>\n    <React.StrictMode>\n      <App />\n      {/* <Basic /> */}\n      {/* <BasicTable /> */}\n      <Video />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}